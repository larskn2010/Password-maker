import os
import base64
import random
import string
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from cryptography.fernet import Fernet

# === Einstellungen ===
MASTER_PW = "Salz"   # Master-Passwort - MUSS bei Speichern / Lesen identisch sein
DEFAULT_LENGTH = 16  # Standard-L√§nge f√ºr Passw√∂rter

# === Hilfsfunktionen ===
def derive_key(password: str, salt: bytes) -> bytes:
    """Schl√ºssel aus Passwort + Salt ableiten (PBKDF2 + SHA256)."""
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100_000,
        backend=default_backend()
    )
    return base64.urlsafe_b64encode(kdf.derive(password.encode()))

def generate_password(length=DEFAULT_LENGTH) -> str:
    """Zuf√§lliges Passwort erzeugen."""
    zeichen = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(zeichen) for _ in range(length))

# === Speicher- und Ladelogik ===
def save_password(filename, master_password, account, username, password):
    """Eintrag verschl√ºsseln und speichern."""
    salt = os.urandom(16)
    key = derive_key(master_password, salt)
    encrypted = Fernet(key).encrypt(f"{account}:{username}:{password}".encode())

    with open(filename, 'ab') as file:
        file.write(salt + encrypted + b'\n')

def list_passwords(filename, master_password):
    """Gespeicherte Eintr√§ge entschl√ºsseln und anzeigen."""
    if not os.path.exists(filename):
        print("‚ö† Datei nicht gefunden.")
        return

    with open(filename, 'rb') as file:
        lines = file.readlines()

    if not lines:
        print("‚ö† Keine Eintr√§ge vorhanden.")
        return

    print("\n----- Gespeicherte Passw√∂rter -----")
    print(f"{'Account':20} | {'Benutzername':20} | {'Passwort'}")
    print("-" * 60)

    for line in lines:
        salt = line[:16]
        enc = line[16:].strip()
        try:
            key = derive_key(master_password, salt)
            acc, user, pw = Fernet(key).decrypt(enc).decode().split(':', 2)
            print(f"{acc:20} | {user:20} | {pw}")
        except Exception:
            print("‚ùå Fehler: Masterpasswort falsch oder Eintrag besch√§digt.")
            return

# === Hauptmen√º ===
def main():
    print("üîê Passwort-Manager")
    filename = input("Dateiname (z.B. passmanager.dat): ")

    while True:
        print("\nMen√º:")
        print("1) Neues Passwort generieren & speichern")
        print("2) Alle Passw√∂rter anzeigen")
        print("3) Beenden")
        choice = input("Deine Wahl: ")

        if choice == '1':
            master = input("Master-Passwort: ")
            if master != MASTER_PW:
                print("‚ùå Falsches Masterpasswort!")
                continue

            acc = input("Account/Seite: ")
            user = input("Benutzername: ")

            try:
                length = int(input(f"Passwort-L√§nge (Standard {DEFAULT_LENGTH}): "))
            except:
                length = DEFAULT_LENGTH

            pw = generate_password(length)
            print(f"‚úÖ Generiertes Passwort: {pw}")
            save_password(filename, master, acc, user, pw)
            print("üíæ Gespeichert & verschl√ºsselt.")

        elif choice == '2':
            master = input("Master-Passwort: ")
            if master != MASTER_PW:
                print("‚ùå Falsches Masterpasswort!")
                continue
            list_passwords(filename, master)

        elif choice == '3':
            print("üëã Tsch√ºss!")
            break
        else:
            print("‚ö† Ung√ºltige Auswahl.")

if __name__ == "__main__":
    main()
