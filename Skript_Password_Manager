import os
import base64
import random
import string
import hashlib
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from cryptography.fernet import Fernet

DEFAULT_LENGTH = 16

# === Hilfsfunktionen ===
def hash_password(password: str) -> str:
    """Hash des Masterpassworts erzeugen (SHA256, hex)."""
    return hashlib.sha256(password.encode()).hexdigest()

def derive_key(password: str, salt: bytes) -> bytes:
    """Schlüssel aus Passwort + Salt ableiten."""
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100_000,
        backend=default_backend()
    )
    return base64.urlsafe_b64encode(kdf.derive(password.encode()))

def generate_password(length=DEFAULT_LENGTH) -> str:
    """Zufälliges Passwort erzeugen."""
    zeichen = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(zeichen) for _ in range(length))

# === Masterpasswort-Logik ===
def load_or_set_master_key(filename):
    """Lädt existierendes Masterpasswort oder fragt neues ab und speichert es."""
    keyfile = filename + ".key"

    if os.path.exists(keyfile):
        entered = input("Master-Passwort: ")
        with open(keyfile, 'r') as f:
            stored_hash = f.read().strip()
        if hash_password(entered) != stored_hash:
            print("❌ Falsches Masterpasswort!")
            return None
        return entered
    else:
        # Neue Datei → neues Masterpasswort setzen
        new_pass = input("Neues Masterpasswort festlegen: ")
        confirm = input("Masterpasswort Bestätigen: ")
        if new_pass != confirm:
            print("Passwörter stimmen nicht überein!")
            return None
        with open(keyfile, 'w') as f:
            f.write(hash_password(new_pass))
        print("Masterpasswort festgelegt.")
        return new_pass

# === Speicher- und Ladelogik ===
def save_password(filename, master_password, account, username, password):
    salt = os.urandom(16)
    key = derive_key(master_password, salt)
    encrypted = Fernet(key).encrypt(f"{account}:{username}:{password}".encode())

    with open(filename, 'ab') as file:
        file.write(salt + encrypted + b'\n')

def list_passwords(filename, master_password):
    if not os.path.exists(filename):
        print("Datei kann nicht gefunden werden.")
        return

    with open(filename, 'rb') as file:
        lines = file.readlines()

    if not lines:
        print("Keine Passwörter gespeichert.")
        return

    print("\nGespeicherte Passwörter")
    print(f"{'Account':20} | {'Benutzername':20} | {'Passwort'}")
    print("-" * 60)

    for line in lines:
        if len(line.strip()) < 17:
            continue
        salt = line[:16]
        enc = line[16:].strip()
        try:
            key = derive_key(master_password, salt)
            acc, user, pw = Fernet(key).decrypt(enc).decode().split(':', 2)
            print(f"{acc:20} | {user:20} | {pw}")
        except Exception:
            print("Fehler: Masterpasswort falsch oder Eintrag beschädigt.")
            return

# === Hauptmenü ===
def main():
    print("Passwort-Manager (pro Datei eigenes Masterpasswort)")
    filename = input("Dateiname (z.B. passmanager.dat): ")

    # Masterpasswort laden oder anlegen
    master_pw = load_or_set_master_key(filename)
    if not master_pw:
        return

    while True:
        print("\nMenü:")
        print("1) Neues Passwort generieren & speichern")
        print("2) Alle Passwörter anzeigen")
        print("3) Beenden")
        choice = input("suche deine aktion aus: ")

        if choice == '1':
            acc = input("Account/Seite: ")
            user = input("Benutzername: ")
            try:
                length = int(input(f"Passwort-Länge: "))
            except:
                length = DEFAULT_LENGTH
            pw = generate_password(length)
            print(f"Generiertes Passwort: {pw}")
            save_password(filename, master_pw, acc, user, pw)
            print("Passwort Gespeichert & verschlüsselt.")

        elif choice == '2':
            list_passwords(filename, master_pw)

        elif choice == '3':
            print("TschüssAuf wiedersehen")
            break
        else:
            print("Diese aktion gibt es nicht.")

if __name__ == "__main__":
    main()
